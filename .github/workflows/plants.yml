name: Deploy plants service

on:
  push:
    branches: [master]
    paths:
      - "plants/**"

defaults:
  run:
    working-directory: plants

jobs:
  build-push:
    name: Build and push the Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@master
      - name: Build image
        run: docker build -t lewislbr/plants-prod -f Dockerfile.prod ./
      - name: Log in
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Push image
        run: docker push lewislbr/plants-prod
  deploy:
    name: Deploy the Docker image to DigitalOcean
    runs-on: ubuntu-latest
    needs: build-push
    steps:
      - name: Log in, add environment variables, and deploy image
        uses: appleboy/ssh-action@master
        env:
          PLANTS_COLLECTION_NAME: ${{ secrets.PLANTS_COLLECTION_NAME }}
          PLANTS_DATABASE_NAME: ${{ secrets.PLANTS_DATABASE_NAME }}
          PLANTS_EXPOSED_PORT: ${{ secrets.PLANTS_EXPOSED_PORT }}
          PLANTS_MONGODB_URI: ${{ secrets.PLANTS_MONGODB_URI }}
          UI_PRODUCTION_URL: ${{ secrets.UI_PRODUCTION_URL }}
        with:
          host: ${{ secrets.DIGITALOCEAN_PLANTS_HOST }}
          username: ${{ secrets.DIGITALOCEAN_USERNAME }}
          key: ${{ secrets.DIGITALOCEAN_KEY }}
          envs: PLANTS_COLLECTION_NAME, PLANTS_DATABASE_NAME, PLANTS_EXPOSED_PORT, PLANTS_MONGODB_URI, UI_PRODUCTION_URL,
          script: |
            rm .plants-env
            echo "PORT=$PORT" >> .plants-env
            echo "PRODUCTION_URL=$PRODUCTION_URL" >> .plants-env
            echo "COLLECTION_NAME=$COLLECTION_NAME" >> .plants-env
            echo "DATABASE_NAME=$DATABASE_NAME" >> .plants-env
            echo "MONGODB_URI=$MONGODB_URI" >> .plants-env
            docker pull lewislbr/plants-prod
            docker rm -f plants-prod
            docker run --env-file .env -d --restart unless-stopped -p 4040:4040 --name plants-prod lewislbr/plants-prod
            docker system prune -f
