name: Deploy plants service

on:
  push:
    branches: [master]
    paths:
      - "plants/**"

defaults:
  run:
    working-directory: plants

jobs:
  build-push-app:
    name: Build and push the app Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@master
      - name: Build image
        run: docker build -t "${{ secrets.DOCKER_USERNAME }}"/"${{ secrets.PLANTS_APP_NAME }}" -f Dockerfile.prod ./
      - name: Log in
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Push image
        run: docker push "${{ secrets.DOCKER_USERNAME }}"/"${{ secrets.PLANTS_APP_NAME }}"

  build-push-db:
    name: Build and push the db Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@master
      - name: Build image
        run: docker build -t "${{ secrets.DOCKER_USERNAME }}"/"${{ secrets.PLANTS_DB_NAME }}" -f db/Dockerfile.prod ./db
      - name: Log in
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Push image
        run: docker push "${{ secrets.DOCKER_USERNAME }}"/"${{ secrets.PLANTS_DB_NAME }}"

  build-push-proxy:
    name: Build and push the proxy Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@master
      - name: Build image
        run: docker build -t "${{ secrets.DOCKER_USERNAME }}"/"${{ secrets.PLANTS_PROXY_NAME }}" -f proxy/Dockerfile.prod ./proxy
      - name: Log in
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Push image
        run: docker push "${{ secrets.DOCKER_USERNAME }}"/"${{ secrets.PLANTS_PROXY_NAME }}"

  deploy:
    name: Deploy the Docker image to DigitalOcean
    runs-on: ubuntu-latest
    needs: [build-push-app, build-push-db, build-push-proxy]
    steps:
      - name: Log in, add environment variables, and deploy image
        uses: appleboy/ssh-action@master
        env:
          DOCKER_USERNAME: "${{ secrets.DOCKER_USERNAME }}"
          PLANTS_APP_NAME: "${{ secrets.PLANTS_APP_NAME }}"
          PLANTS_APP_PORT: ${{ secrets.PLANTS_APP_PORT }}
          PLANTS_COLLECTION_NAME: ${{ secrets.PLANTS_COLLECTION_NAME }}
          PLANTS_DATABASE_NAME: ${{ secrets.PLANTS_DATABASE_NAME }}
          PLANTS_DB_NAME: "${{ secrets.PLANTS_DB_NAME }}"
          PLANTS_MONGODB_PRODUCTION_URI: ${{ secrets.PLANTS_MONGODB_PRODUCTION_URI }}
          PLANTS_PROXY_NAME: ${{ secrets.PLANTS_PROXY_NAME }}
          UI_PRODUCTION_URL: ${{ secrets.UI_PRODUCTION_URL }}
        with:
          host: ${{ secrets.DIGITALOCEAN_PLANTS_HOST }}
          username: ${{ secrets.DIGITALOCEAN_USERNAME }}
          key: ${{ secrets.DIGITALOCEAN_KEY }}
          envs: DOCKER_USERNAME, PLANTS_APP_NAME, PLANTS_APP_PORT, PLANTS_COLLECTION_NAME, PLANTS_DATABASE_NAME, PLANTS_DB_NAME, PLANTS_MONGODB_PRODUCTION_URI, PLANTS_PROXY_NAME, UI_PRODUCTION_URL
          script: |
            rm .env
            echo "PLANTS_APP_PORT=$PLANTS_APP_PORT" >> .env
            echo "PLANTS_COLLECTION_NAME=$PLANTS_COLLECTION_NAME" >> .env
            echo "PLANTS_DATABASE_NAME=$PLANTS_DATABASE_NAME" >> .env
            echo "PLANTS_MONGODB_PRODUCTION_URI=$PLANTS_MONGODB_PRODUCTION_URI" >> .env
            echo "UI_PRODUCTION_URL=$UI_PRODUCTION_URL" >> .env
            docker pull $DOCKER_USERNAME/$PLANTS_DB_NAME
            docker pull $DOCKER_USERNAME/$PLANTS_APP_NAME
            docker network create --internal plants
            docker run -d --network plants --restart unless-stopped -v plants-db:/data/db --name $PLANTS_DB_NAME $DOCKER_USERNAME/$PLANTS_DB_NAME --config /etc/mongod.conf
            docker rm -f $PLANTS_APP_NAME
            docker run -d -p $PLANTS_APP_PORT:$PLANTS_APP_PORT --network plants --restart unless-stopped --env-file .env --name $PLANTS_APP_NAME $DOCKER_USERNAME/$PLANTS_APP_NAME
            docker rm -f $PLANTS_PROXY_NAME
            docker run -d -p 80:10000 --network plants --restart unless-stopped -e ENVOY_UID=777 -e ENVOY_GID=777 --name $PLANTS_PROXY_NAME $DOCKER_USERNAME/$PLANTS_PROXY_NAME
            docker network connect bridge $PLANTS_PROXY_NAME
            docker system prune -f --volumes
